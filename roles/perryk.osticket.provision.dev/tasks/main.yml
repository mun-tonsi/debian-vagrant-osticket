# vim: set ft=ansible et ts=2 sw=2:
#
# after OS install this script can be used to install osticket on a centos host
#
---

- name: pip3 install PyMySQL
  pip:
    name: PyMySQL

- name: dnf install httpd
  dnf: 
    pkg: "{{ item }}"
    state: present
  with_items:
    - httpd
    - httpd-devel
    - mod_ssl


- name: dnf install mariadb
  dnf: 
    pkg: "{{ item }}"
    state: present
  with_items:
    - mariadb-server
    - mariadb-devel
  when: mysql_server_choice == 'mariadb'

- name: dnf install offical mysql
  dnf: 
    pkg: "{{ item }}"
    state: present
  with_items:
    - mysql-server
    - mysql-devel
  when: mysql_server_choice == 'mysqld'

- name: dnf install everything php related from yumi repo
  dnf: 
    name: "{{ item }}"
    enablerepo: remi,remi-php80
    state: present
  with_items:
    - phpMyAdmin

# ^ now should only need gd, gettext, imap, json, mbstring, and xml 
# ^ no longer installing php here, now using an ansible role to do this

- name: modify php config
  ini_file:
    dest: /etc/php.ini
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { section: Date, option: date.timezone, value: Australia/Brisbane }
    - { section: PHP, option: upload_max_filesize, value: 20M }

- name: modify phpMyAdmin config
  replace:
    path: /etc/httpd/conf.d/phpMyAdmin.conf
    regexp: "^(.*)Require local(.*)$"
    replace: "     Require ip 10.0.0.1"
    backup: yes

- name: mariadb enable + start
  systemd:
    name: mariadb
    enabled: yes
    state: started
  when: mysql_server_choice == 'mariadb'

- name: mysqld enable + start
  systemd:
    name: mysqld
    enabled: yes
    state: started
  when: mysql_server_choice == 'mysqld'

- name: delete anonymous MySQL server user for {{ ansible_nodename }}
  mysql_user:
    name: ""
    host_all: yes
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    check_implicit_admin: yes
    state: absent

- name: Change root user password on first run
  mysql_user:
    host_all: yes
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    check_implicit_admin: yes
    name: root
    password: "{{ mariadb_root_password }}"
    priv: "*.*:ALL,GRANT"
 
- name: remove the MySQL test database
  mysql_db:
      login_user: root
      login_password: "{{ mariadb_root_password }}"
      db: test
      state: absent
  notify: 
    - restart mariadb
    - restart mysqld

- name: create database user {{ osticket_dbuser }} with access to database {{ osticket_dbname }}
  mysql_user:
    name: "{{ osticket_dbuser }}"
    password: "{{ osticket_dbpass }}"
    priv: "{{ osticket_dbname }}.*:ALL"
    host: localhost
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    state: present

# now being done in the playbook running this role
# - name: add a service user, osticket
#  user:
#    name: osticket

- name: create my.cnf file for osticket user 
  template: 
    src: 'templates/my.cnf.j2'
    dest: '/home/osticket/.my.cnf'
    owner: osticket
    group: osticket
    mode: 0600

- name: create my.cnf file for root user 
  template: 
    src: 'templates/root-my.cnf.j2'
    dest: '/root/.my.cnf'
    mode: 0600

- name: create database {{ osticket_dbname }} 
  mysql_db: 
    name: "{{ osticket_dbname }}"
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    state: present
  register: databasecreate

#- name: copy preexisting database export file into /tmp to test out already copied functionality
#  copy:
#    src: database_to_import.sql
#  dest: /tmp/database_to_import.sql

- name: Check for already copied database export file
  stat:
    path: '/tmp/database_to_import.sql'
  register: alreadycopiedimportfile
  when: databasecreate.changed

- name: Set variable for when the already copied database export file exists
  ansible.builtin.set_fact:
    alreadycopiedimportfileexists: true
  when:  databasecreate.changed and alreadycopiedimportfile.stat.exists

- name: Check for local preexisting database export file
  local_action: stat path=database_to_import.sql
  become: no
  register: localimportfile
  when: databasecreate.changed and alreadycopiedimportfileexists is not defined

- name: Set variable for when the local preexisting database export file exists
  ansible.builtin.set_fact:
    localimportfileexists: true
  when: alreadycopiedimportfileexists is not defined and localimportfile.stat.exists

- name: Set importfile when already copied database export file exists
  ansible.builtin.set_fact:
    importfile: "/tmp/database_to_import.sql"
  when: alreadycopiedimportfileexists is defined

- name: Set importfile when local preexisting database export file exists, n.b need to refer to file on vm not one on management workstation
  ansible.builtin.set_fact:
    importfile: "/home/osticket/database_to_import.sql"
  when: not alreadyimportfileexists is defined and localimportfileexists is defined

- name: copy preexisting database export file into place
  copy:
    src: database_to_import.sql
    dest: /home/osticket/database_to_import.sql
  when: databasecreate.changed and localimportfileexists is defined

- name: import preexisting database sql file into database {{ osticket_dbname }}
  mysql_db:
    name: "{{ osticket_dbname }}"
    #login_user: root
    #login_password: "{{ mariadb_root_password }}"
    target: "{{ importfile }}"
    state: import
    use_shell: yes
  when: databasecreate.changed and importfile is defined
  notify: run upgrader

- name: remove preexisting database export file
  file:
    path: /home/osticket/database_to_import.sql
    state: absent
  when: databasecreate.changed and localimportfileexists is defined

- name: create webroot folder
  file: dest=/var/www/html/osticket state=directory owner=osticket group=osticket

- name: as osticket grab the latest source from osTicket's github
  git:
    repo: "https://github.com/osTicket/osTicket.git"
    dest: ~/osTicket
    accept_hostkey: yes
    version: "{{ osticket_repo_version }}"
    force: yes
  become_user: osticket
  register: osticketrepoclone

- name: Clone a bunch of plugin repos by clonemeagain and place into their own folders under main repo folder
  git:
    repo: "{{ item.repo }}"
    dest: "{{ item.dest }}"
    version: "{{ item.version }}"
  with_items:
    - { repo: 'https://github.com/perryk/attachment_preview.git', dest: '~/osTicket/include/plugins/attachment_preview', version: 'fixes_php8' }
    - { repo: 'https://github.com/perryk/osticket-plugin-mentioner.git', dest: '~/osTicket/include/plugins/mentioner', version: 'fixes_php8' }
    - { repo: 'https://github.com/perryk/plugin-autocloser.git', dest: '~/osTicket/include/plugins/autocloser', version: 'fixes_php8' }
    - { repo: 'https://github.com/perryk/osticket-slack.git', dest: '~/osTicket/include/plugins/slack', version: 'fixes_php8' }
  become_user: osticket
  register: otherreposclone 

- name: set handler if repos have changed
  set_fact: somethingchanged=yes
  when: osticketrepoclone.changed or otherreposclone.changed
  notify: deploy osticket

- name: a once off osticket deploy osticket without setup if never been done before so folders for attachments etc can still be done
  command: ./manage.php deploy /var/www/html/osticket
  args:
    chdir: /home/osticket/osTicket
    creates: /var/www/html/osticket/include
  when: osticketrepoclone.changed or otherreposclone.changed
  become_user: osticket
  ignore_errors: yes

- name: create directories for attachments and archives
  file:
    dest: '{{ item.dest }}'
    state: directory
    owner: apache
    group: osticket
  with_items:
    - { dest: '/var/www/html/attachments' }
    - { dest: '/var/www/html/archives' }

- name: set selinux perms for attachments and archives directories
  file:
    path: '{{ item.path }}'
    setype: httpd_sys_rw_content_t
  with_items:
    - { path: '/var/www/html/attachments' }
    - { path: '/var/www/html/archives' }

#- name: copy preexisting attachments file into /tmp to test out already copied functionality
#  copy:
#    src: attachments_to_import.tar.gz
#    dest: /tmp/attachments_to_import.tar.gz

- name: Check for already copied attachments file
  stat:
    path: '/tmp/attachments_to_import.tar.gz'
  register: alreadycopiedattachmentsfile
  when: databasecreate.changed

- name: Set variable for when the already copied attachments file exists
  ansible.builtin.set_fact:
    alreadycopiedattachmentsfileexists: true
  when: databasecreate.changed and alreadycopiedattachmentsfile.stat.exists

- name: Check for local preexisting attachments file
  local_action: stat path=attachments_to_import.tar.gz
  become: no
  register: localattachmentsfile
  when: databasecreate.changed and alreadycopiedattachmentsfileexists is not defined

- name: Set variable for when the local preexisting attachments file exists
  ansible.builtin.set_fact:
    localattachmentsfileexists: true
  when: alreadycopiedattachmentsfileexists is not defined and localattachmentsfile.stat.exists

- name: Set attachmentsfile when already copied attachments file exists
  ansible.builtin.set_fact:
    attachmentsfile: "/tmp/attachments_to_import.tar.gz"
  when: alreadycopiedattachmentsfileexists is defined

- name: Set attachmentsfile when local preexisting attachments file exists, n.b need to refer to file on vm not one on management workstation
  ansible.builtin.set_fact:
    attachmentsfile: "/home/osticket/attachments_to_import.tar.gz"
  when: alreadycopiedattachmentsfileexists is not defined and localattachmentsfileexists is defined

- name: copy preexisting attachments file into place
  copy:
    src: attachments_to_import.tar.gz
    dest: /home/osticket/attachments_to_import.tar.gz
  when: databasecreate.changed and localattachmentsfileexists is defined

#- name: print value of attachmentsfile
#  debug:
#    msg: "{{ attachmentsfile }}"

- name: Fancy tar extract to just take what we need from the backup
  unarchive:
    #src: '/home/osticket/attachments_to_import.tar.gz'
    src: '{{ attachmentsfile }}'
    remote_src: true
    dest: '/var/www/html/attachments/'
    extra_opts:
      - --selinux
      - --acls
      - --xattrs
      - --strip-components=4
      - '/var/www/html/attachments/'
  when: databasecreate.changed and attachmentsfile is defined

- name: run an upgrade if a database was imported
  command: ~/osTicket/manage.php upgrade
  args:
    chdir: /var/www/html/osticket
  when: databasecreate.changed and importfile is defined
  become_user: osticket
  #ignore_errors: yes

- name: check to see if the the osticket config file exists
  stat:
    path: /var/www/html/osticket/include/ost-config.php
  register: ostconfigfile

- name: deploy osticket with setup if importfile did not exist and if config file not already in place
  command: ./manage.php deploy --setup /var/www/html/osticket
  args:
    chdir: /home/osticket/osTicket
    creates: /var/www/html/osticket/include/setup
  when: not importfile is defined and not ostconfigfile.stat.exists
  become_user: osticket
  ignore_errors: yes

- name: copy ost-sampleconfig.php to ost-config inside /var/www/html/osticket/include and allow to be written by apache if importfile did not exist and if config file not already in place
  copy:
    src: /var/www/html/osticket/include/ost-sampleconfig.php
    dest: /var/www/html/osticket/include/ost-config.php
    owner: osticket
    group: apache
    mode: 0660
    remote_src: yes
    setype: httpd_sys_rw_content_t
  when: not importfile is defined and not ostconfigfile.stat.exists

- name: Use template to generate ost-config.php config file for osticket if importfile did exist and if config file not already in place
  template:
    src: templates/ost-config.php.j2
    dest: /var/www/html/osticket/include/ost-config.php
    owner: osticket
    group: apache
    mode: 0640
    setype: httpd_sys_content_t
  when: importfile is defined and not ostconfigfile.stat.exists

- name: Use template to generate httpd config for osticket
  template:
    src: templates/osticket.conf.j2
    dest: /etc/httpd/conf.d/osticket.conf
    owner: root
    group: root
    mode: 0640
  notify: restart httpd

- name: run another upgrade if a database was imported as usually takes a couple of times to work
  command: ~/osTicket/manage.php upgrade
  args:
    chdir: /var/www/html/osticket
  when: databasecreate.changed and importfile is defined
  become_user: osticket
  #ignore_errors: yes

- name: set selinux sebooleans
  seboolean:
    name: '{{ item.name }}'
    state: yes
    persistent: yes
  with_items:
    - { name: httpd_can_sendmail }
    - { name: httpd_can_connect_ldap }
    - { name: httpd_can_network_connect }
  notify: restart httpd

- name: httpd enable + start
  systemd:
    name: httpd
    enabled: yes
    state: started

# Need a cron entry for apache user to run osticket cron to check email every 5 mins, only once all email accounts are confirmed working

